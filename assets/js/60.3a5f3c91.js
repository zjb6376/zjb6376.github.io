(window.webpackJsonp=window.webpackJsonp||[]).push([[60],{224:function(t,a,s){"use strict";s.r(a);var e=s(0),i=Object(e.a)({},function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h4",{attrs:{id:"git常用命令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git常用命令","aria-hidden":"true"}},[t._v("#")]),t._v(" git常用命令")]),t._v(" "),s("ol",[s("li",[t._v("查看git安装版本")])]),t._v(" "),s("div",{staticClass:"language-git extra-class"},[s("pre",{pre:!0,attrs:{class:"language-git"}},[s("code",[t._v("git --version\n")])])]),s("ol",{attrs:{start:"2"}},[s("li",[t._v("初始化git仓库（会创建一个唯一的分支master）")])]),t._v(" "),s("div",{staticClass:"language-git extra-class"},[s("pre",{pre:!0,attrs:{class:"language-git"}},[s("code",[t._v("git init\n")])])]),s("ol",{attrs:{start:"3"}},[s("li",[t._v("把文件添加到仓库（把文件添加到暂存区 .git）")])]),t._v(" "),s("div",{staticClass:"language-git extra-class"},[s("pre",{pre:!0,attrs:{class:"language-git"}},[s("code",[t._v("git add 文件名    //git add hello.java 或者（添加该目录下所有的文件，用 . 表示全部文件）git add .\n")])])]),s("ol",{attrs:{start:"4"}},[s("li",[t._v("把文件提交到仓库（把暂存区的内容提交到当前分支）")])]),t._v(" "),s("div",{staticClass:"language-git extra-class"},[s("pre",{pre:!0,attrs:{class:"language-git"}},[s("code",[t._v("git commit -m "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'备注'")]),t._v("\n")])])]),s("ol",{attrs:{start:"5"}},[s("li",[t._v("查看仓库文件状态")])]),t._v(" "),s("div",{staticClass:"language-git extra-class"},[s("pre",{pre:!0,attrs:{class:"language-git"}},[s("code",[t._v("git status\n")])])]),s("ol",{attrs:{start:"6"}},[s("li",[t._v("查看文件的变动")])]),t._v(" "),s("div",{staticClass:"language-git extra-class"},[s("pre",{pre:!0,attrs:{class:"language-git"}},[s("code",[t._v("git diff\n")])])]),s("ol",{attrs:{start:"7"}},[s("li",[t._v("查看文件内容")])]),t._v(" "),s("div",{staticClass:"language-git extra-class"},[s("pre",{pre:!0,attrs:{class:"language-git"}},[s("code",[t._v("cat 文件名\n")])])]),s("ol",{attrs:{start:"8"}},[s("li",[t._v("返回到上一个版本")])]),t._v(" "),s("div",{staticClass:"language-git extra-class"},[s("pre",{pre:!0,attrs:{class:"language-git"}},[s("code",[t._v("git reset --hard HEAD^\n")])])]),s("ol",{attrs:{start:"9"}},[s("li",[t._v("从之前的版本再返回后面的版本")])]),t._v(" "),s("div",{staticClass:"language-git extra-class"},[s("pre",{pre:!0,attrs:{class:"language-git"}},[s("code",[t._v("首先需要git log命令记录下后面版本的 commitid\n然后 git reset --hard commitid\ngit reflog 可以查看历史命令，找回commitid\n")])])]),s("ol",{attrs:{start:"10"}},[s("li",[t._v("丢弃工作区的修改")])]),t._v(" "),s("div",{staticClass:"language-git extra-class"},[s("pre",{pre:!0,attrs:{class:"language-git"}},[s("code",[t._v("修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；\n已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。\ngit checkout -- 文件名    //git checkout -- hello.java\n")])])]),s("ol",{attrs:{start:"11"}},[s("li",[t._v("把暂存区的文件回退到工作区")])]),t._v(" "),s("div",{staticClass:"language-git extra-class"},[s("pre",{pre:!0,attrs:{class:"language-git"}},[s("code",[t._v("git reset HEAD 文件名    //git reset HEAD hello.java\n")])])]),s("ol",{attrs:{start:"12"}},[s("li",[t._v("删除版本库的文件")])]),t._v(" "),s("div",{staticClass:"language-git extra-class"},[s("pre",{pre:!0,attrs:{class:"language-git"}},[s("code",[t._v("git rm 文件名    //git rm demo.java\ngit commit -m "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"删除了demo文件"')]),t._v("\n")])])]),s("ol",{attrs:{start:"13"}},[s("li",[t._v("从版本库恢复文件")])]),t._v(" "),s("div",{staticClass:"language-git extra-class"},[s("pre",{pre:!0,attrs:{class:"language-git"}},[s("code",[t._v("git checkout -- 文件名\n")])])]),s("ol",{attrs:{start:"14"}},[s("li",[t._v("主目录下创建SSH Key")])]),t._v(" "),s("div",{staticClass:"language-git extra-class"},[s("pre",{pre:!0,attrs:{class:"language-git"}},[s("code",[t._v("$ ssh-keygen -t rsa -C "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"956673039@qq.com"')]),t._v("\n一直回车完成\n")])])]),s("ol",{attrs:{start:"15"}},[s("li",[t._v("将本地库和远程github仓库关联起来")])]),t._v(" "),s("div",{staticClass:"language-git extra-class"},[s("pre",{pre:!0,attrs:{class:"language-git"}},[s("code",[t._v("git remote add origin git@github.com:zjb6376/learngit.git\n")])])]),s("ol",{attrs:{start:"16"}},[s("li",[t._v("查看是否关联成功")])]),t._v(" "),s("div",{staticClass:"language-git extra-class"},[s("pre",{pre:!0,attrs:{class:"language-git"}},[s("code",[t._v("ssh -T git@github.com\n如果没有关联成功，修改在git的安装目录下/etc/ssh文件夹中的ssh_config文件\n在最下面添加：\nHost github.com\nUser 用户账号\nHostname ssh.github.com\nPreferredAuthentications publickey\nIdentityFile ~/.ssh/id_rsa\nPort 443\n")])])]),s("ol",{attrs:{start:"17"}},[s("li",[t._v("第一次推送到远程仓库")])]),t._v(" "),s("div",{staticClass:"language-git extra-class"},[s("pre",{pre:!0,attrs:{class:"language-git"}},[s("code",[t._v("git push -u origin master\n后续推送只需要 git push origin master\n如果报错 ![rejected] master -> master (non-fast-forward)\n执行 git pull origin master --allow-unrelated-histories\n")])])]),s("ol",{attrs:{start:"18"}},[s("li",[t._v("克隆远程仓库")])]),t._v(" "),s("div",{staticClass:"language-git extra-class"},[s("pre",{pre:!0,attrs:{class:"language-git"}},[s("code",[t._v("git clone git@github.com:zjb6376/learn.git 或 git clone https://github.com/zjb6376/learn.git\n")])])]),s("ol",{attrs:{start:"19"}},[s("li",[t._v("创建分支branch")])]),t._v(" "),s("div",{staticClass:"language-git extra-class"},[s("pre",{pre:!0,attrs:{class:"language-git"}},[s("code",[t._v("git branch 分支名称    //git branch dev\n")])])]),s("ol",{attrs:{start:"20"}},[s("li",[t._v("切换分支")])]),t._v(" "),s("div",{staticClass:"language-git extra-class"},[s("pre",{pre:!0,attrs:{class:"language-git"}},[s("code",[t._v("git checkout 分支名    //git checkout dev        或者使用 git switch 分支名\n")])])]),s("ol",{attrs:{start:"21"}},[s("li",[t._v("查看所有分支")])]),t._v(" "),s("div",{staticClass:"language-git extra-class"},[s("pre",{pre:!0,attrs:{class:"language-git"}},[s("code",[t._v("git branch\n分支前带 * 代表当前所处的分支\n")])])]),s("ol",{attrs:{start:"22"}},[s("li",[t._v("合并分支到当前分支")])]),t._v(" "),s("div",{staticClass:"language-git extra-class"},[s("pre",{pre:!0,attrs:{class:"language-git"}},[s("code",[t._v("git merge 分支名    //git merge dev\n")])])]),s("ol",{attrs:{start:"23"}},[s("li",[t._v("删除分支")])]),t._v(" "),s("div",{staticClass:"language-git extra-class"},[s("pre",{pre:!0,attrs:{class:"language-git"}},[s("code",[t._v("git branch -d 分支名    //git branch -d dev\n")])])]),s("ol",{attrs:{start:"24"}},[s("li",[t._v("强制销毁分支")])]),t._v(" "),s("div",{staticClass:"language-git extra-class"},[s("pre",{pre:!0,attrs:{class:"language-git"}},[s("code",[t._v("git branch -D 分支名\n")])])]),s("ol",{attrs:{start:"25"}},[s("li",[t._v("查看远程仓库详细信息")])]),t._v(" "),s("div",{staticClass:"language-git extra-class"},[s("pre",{pre:!0,attrs:{class:"language-git"}},[s("code",[t._v("git remote -v\n")])])]),s("ol",{attrs:{start:"26"}},[s("li",[t._v("git查看用户名和邮箱并修改")])]),t._v(" "),s("div",{staticClass:"language-git extra-class"},[s("pre",{pre:!0,attrs:{class:"language-git"}},[s("code",[t._v("git config user.name\ngit config user.email\ngit config --global user.name "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"your name"')]),t._v("\ngit config --global user.email "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"your email"')]),t._v("\n")])])]),s("ol",{attrs:{start:"27"}},[s("li",[t._v("删除已连接的远程仓库")])]),t._v(" "),s("div",{staticClass:"language-git extra-class"},[s("pre",{pre:!0,attrs:{class:"language-git"}},[s("code",[t._v("git remote rm origin\n")])])]),s("ol",{attrs:{start:"28"}},[s("li",[t._v("如果本地仓库要连到 github 和 gitee")])]),t._v(" "),s("div",{staticClass:"language-git extra-class"},[s("pre",{pre:!0,attrs:{class:"language-git"}},[s("code",[t._v("git remote add github git@github.com:zjb6376/learn.git\ngit remote add gitee git@github.com:zjb6376/learn.git\n\ngit push github master\ngit push gitee master\n")])])]),s("ol",{attrs:{start:"29"}},[s("li",[t._v("忽略特殊文件")])]),t._v(" "),s("div",{staticClass:"language-git extra-class"},[s("pre",{pre:!0,attrs:{class:"language-git"}},[s("code",[t._v("工作区根目录下创建 .gitignore 文件\n*.class\n")])])]),s("p",[t._v("多人协作的工作模式通常是这样：")]),t._v(" "),s("ol",[s("li",[t._v("首先，可以试图用git push origin "),s("branch-name",[t._v("推送自己的修改；")])],1),t._v(" "),s("li",[t._v("如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；")]),t._v(" "),s("li",[t._v("如果合并有冲突，则解决冲突，并在本地提交；")]),t._v(" "),s("li",[t._v("没有冲突或者解决掉冲突后，再用git push origin "),s("branch-name",[t._v("推送就能成功！")])],1)]),t._v(" "),s("p",[t._v("如果git pull提示no tracking information，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream-to "),s("branch-name",[t._v(" origin/"),s("branch-name",[t._v("。")])],1)],1),t._v(" "),s("p",[s("strong",[t._v("小结")])]),t._v(" "),s("p",[t._v("查看远程库信息，使用"),s("code",[t._v("git remote -v")]),t._v("； 本地新建的分支如果不推送到远程，对其他人就是不可见的；从本地推送分支，使用"),s("code",[t._v("git push origin branch-name")]),t._v("，如果推送失败，先用git pull抓取远程的新提交； 在本地创建和远程分支对应的分支，使用"),s("code",[t._v("git checkout -b branch-name origin/branch-name")]),t._v("，本地和远程分支的名称最好一致；建立本地分支和远程分支的关联，使用"),s("code",[t._v("git branch --set-upstream branch-name origin/branch-name")]),t._v("；从远程抓取分支，使用"),s("code",[t._v("git pull")]),t._v("，如果有冲突，要先处理冲突。")])])},[],!1,null,null,null);a.default=i.exports}}]);